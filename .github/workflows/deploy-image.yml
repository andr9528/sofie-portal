name: Node CI

on:
  push:
    branches:
      - '**'
    tags:
      - 'v**'
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Omniorb 4
        run: sudo apt-get install libomniorb4-dev

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Prepare environment
        run: yarn

      - name: Build
        run: yarn build

  dockerhub-release:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: "tv2media/${{ github.event.repository.name }}"
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push docker image tags
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-new-image:
    runs-on: ubuntu-latest
    needs: [build-and-test, dockerhub-release]
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - name: Deploy
        id: deploymentRequest
        uses: fjogeleit/http-request-action@master
        with:
            url: "https://${{ secrets.DEPLOYMENT_API_URL }}/production"
            method: 'POST'
            username: ${{ secrets.DEPLOYMENT_USERNAME }}
            password: ${{ secrets.DEPLOYMENT_PASSWORD }}
            data: "{\"target\":\"${{ secrets.DEPLOYMENT_TARGET }}\"}"

      - name: Deployment failed
        if: ${{ !contains(steps.deploymentRequest.outputs.response, 'success') }}
        run: echo ${{ steps.deploymentRequest.outputs.response }} && exit 1

