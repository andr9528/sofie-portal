# This is a basic workflow to help you get started with Actions

name: Node Native CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events
  push:
    branches:
      - '**'
    tags:
      - 'v**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-test:
    name: Build and test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install Omniorb 4
        run: sudo apt-get install libomniorb4-dev

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Prepare environment
        run: yarn

      - name: Build
        run: yarn build

    #   - name: Lint and test
    #     run: yarn test

#   validate-prod-dependencies:
#     name: Validate production dependencies
#     runs-on: ubuntu-latest
#     continue-on-error: true
#     timeout-minutes: 15

#     steps:
#       - uses: actions/checkout@v2
#       - name: Use Node.js 16.x
#         uses: actions/setup-node@v1
#         with:
#           node-version: 16.x
#       - name: Install Omniorb 4
#         run: sudo apt-get install libomniorb4-dev
#       - name: Prepare Environment
#         run: yarn
#         env:
#           CI: true
#       - name: Validate production dependencies
#         run: |
#           if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
#             yarn validate:dependencies
#           else
#             echo "Skipping audit"
#           fi
#         env:
#           CI: true

  dockerhub-release:
    name: Make dockerhub release
    runs-on: ubuntu-latest
    needs: [ build-and-test ]
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2
      - name: Get the Docker tag
        id: docker-tag
        uses: yuya-takeyama/docker-tag-from-github-ref-action@2b0614b1338c8f19dd9d3ea433ca9bc0cc7057ba
        with:
          remove-version-tag-prefix: false
      - name: Determine images to publish
        id: image-tags
        run: |
          IMAGES=
          DOCKER_TAG=${{ steps.docker-tag.outputs.tag }}
          # check if a release branch, or master, or a tag
          if [[ $DOCKER_TAG =~ ^release([0-9]+)$ || $DOCKER_TAG == "latest" || "${{ github.ref }}" == refs/tags/* ]]
          then
            # If we have a dockerhub image name, then setup to publish there
            if [ -z "${{ secrets.DOCKERHUB_IMAGE }}" ]
            then
              DOCKERHUB_PUBLISH="0"
            else
              DOCKERHUB_PUBLISH="1"
              IMAGES="${{ secrets.DOCKERHUB_IMAGE }}/${{ github.event.repository.name }}:$DOCKER_TAG"$'\n'$IMAGES
            fi
            # debug output
            echo dockerhub-publish $DOCKERHUB_PUBLISH
            echo images $IMAGES
            echo ::set-output name=images::"$IMAGES"
            echo ::set-output name=dockerhub-publish::"$DOCKERHUB_PUBLISH"
          else
            echo "Skipping docker build"
          fi
      - name: Build
        if: ${{ steps.image-tags.outputs.images }}
        run: |
          sudo apt-get install libomniorb4-dev
          yarn install --check-files --frozen-lockfile
          yarn build
          yarn install --check-files --frozen-lockfile --production --force
      - name: Set up Docker Buildx
        if: ${{ steps.image-tags.outputs.images }}
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: steps.image-tags.outputs.images && steps.image-tags.outputs.dockerhub-publish == '1'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        if: ${{ steps.image-tags.outputs.images }}
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.image-tags.outputs.images }}

  deploy-new-image:
    runs-on: ubuntu-latest
    needs: [build-and-test, dockerhub-release]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy
        id: deploymentRequest
        uses: fjogeleit/http-request-action@master
        with:
            url: "https://${{ secrets.DEPLOYMENT_API_URL }}/production"
            method: 'POST'
            username: ${{ secrets.DEPLOYMENT_USERNAME }}
            password: ${{ secrets.DEPLOYMENT_PASSWORD }}
            data: "{\"target\":\"${{ secrets.DEPLOYMENT_TARGET }}\"}"

      - name: Deployment failed
        if: ${{ !contains(steps.deploymentRequest.outputs.response, 'success') }}
        run: echo ${{ steps.deploymentRequest.outputs.response }} && exit 1
